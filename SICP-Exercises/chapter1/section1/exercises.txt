# 1.1
-- skipping several

(= a b) --> false # a=3 and b=4 previously defined and different
(if (and (> b a) (< b (* a b)))
  b
  a) --> 4

(cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 35))

# 1.2
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

# 1.3
(define (square x) (* x x))
(define (sum-of-squares x y) (+ (square x) (square y)))
(define (two-largest a b c) 
  (cond ((and (<= a b) (<= a c))
          (sum-of-squares b c))
        ((and (<= b a) (<= b c))
          (sum-of-squares a c))
        (else
          (sum-of-squares a b)) ))

# 1.4: always adds the abs of b to a. The thing here is that it can
choose the value of the procedure to use (+ or -) from the parameters (b).

# 1.5: If we could use normal-order evaluation the test (mytest 0 (p)) would
# not go into an infinite loop because (p) would not have to be evaluated.

# 1.6:
for exercise 1.6 I need
(define (sqrt-iter guess x)
    (if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x )))
          
(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y) (/ (+ x y)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

----
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
    (else else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
    guess
    (sqrt-iter (improve guess x) x)))

The problem is that the recursive call to sqrt-iter is evaluated (again by
applicative order evaluation) before choosing a path and it goes in an
infinite loop. If in Scheme is treated differently by the interpreter, but
new-if is just another 'normal' procedure.

